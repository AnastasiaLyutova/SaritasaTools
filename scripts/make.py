#!/usr/bin/env python

import os
import platform
import re
import shutil
import sys
import subprocess


class Target(object):
    def __init__(self, framework, id):
        self.framework = framework
        self.id = id

USEMONO = platform.system().lower() != 'windows'
NUGET = 'nuget.exe' if not USEMONO else 'nuget'
NUNIT = 'nunit-console'
BUILD = 'msbuild' if not USEMONO else 'xbuild'
SIGNKEY = 'saritasa-tools.snk'  # can be generated by sn -k saritasa-tools.snk command
TARGETS = [
    Target('net40', 'v4.0'),
    Target('net45', 'v4.5'),
    Target('net451', 'v4.5.1'),
    Target('net452', 'v4.5.2'),
    Target('net46', 'v4.6'),
    Target('net461', 'v4.6.1'),
    #Target('net462', 'v4.6.2'),
]
PACKAGES = [
    'Saritasa.Tools',
    'Saritasa.Tools.NLog4',
]

def pack():
    for package in PACKAGES:
        shutil.rmtree('lib')
        for target in TARGETS:
            # build & sign
            signfile = os.path.join(os.getcwd(), SIGNKEY)
            buildargs = [BUILD, '../src/Saritasa.Tools.sln', '/p:Configuration=Release', '/p:Platform=Any CPU',
                '/p:TargetFrameworkVersion=' + target.id]
            # if not os.path.exists(signfile):
            #     print('[!] Sign file does not exist')
            #     exit(1)
            # buildargs.append('/p:AssemblyOriginatorKeyFile=' + signfile)
            # buildargs.append('/p:SignAssembly=true')
            retcode = subprocess.call(buildargs)
            if retcode:
                print('[!] Cannot build %s with %s' % (package, target.framework))
                exit(1)
            # copy
            path = os.path.join('lib', target.framework)
            if not os.path.exists(path):
                os.makedirs(path)
            shutil.copy('../src/%s/bin/Release/%s.dll' % (package, package), path)
            shutil.copy('../src/%s/bin/Release/%s.xml' % (package, package), path)
            # get version from AssemblyInfo.cs
            with open('../src/Saritasa.Tools/Properties/AssemblyInfo.cs', 'r') as f:
                version = re.findall(r'AssemblyVersion\(\"(\d+.\d+.\d+).\d+\"\)', f.read())[0]
        # pack
        retcode = subprocess.call([NUGET, 'pack', '%s.nuspec' % package, '-Version', version,
            '-NonInteractive', '-Exclude', '*.snk;*.py'])
        if retcode:
            print('[!] Cannot make package')
            exit(1)
        if not os.path.exists('./pkg'):
            os.makedirs('./pkg')
        shutil.move('%s.%s.nupkg' % (package, version), './pkg/%s.%s.nupkg' % (package, version))


if __name__ == '__main__':
    arg = sys.argv[1] if len(sys.argv) > 1 else None
    if not arg or arg not in globals():
        print('Available commands: pack')
        exit(0)

    globals()[arg]()
